#
# {{ ansible_managed }}
#
# This script get php-fpm status page by directly communicating
# through fastcgi protocal using fcgi tool.
#
# author: Song

import json
import os
import subprocess
import sys
from distutils.spawn import find_executable


HOST = "{{ zabbix_php_fpm.host }}"
PORT = "{{ zabbix_php_fpm.port }}"
SOCKET = "{{ zabbix_php_fpm.socket }}"  # Optional example: "/var/run/php5-fpm.sock"
STATUS_URI = "{{ zabbix_php_fpm.status_uri }}"

# Environment variables are read by cgi-fcgi as input arguments.
# The following are default config
os.environ['SCRIPT_NAME'] = "/status"
os.environ['SCRIPT_FILENAME'] = "/status"
os.environ['QUERY_STRING'] = "full&json"
os.environ['REQUEST_METHOD'] = "GET"

if STATUS_URI:
    os.environ['SCRIPT_NAME'] = STATUS_URI
    os.environ['SCRIPT_FILENAME'] = STATUS_URI

env = dict(os.environ)


# Sample PHP-FPM status page formatted as json
# Example: python php-fpm.py "accepted conn"

# {u'accepted conn': 115,
#  u'active processes': 1,
#  u'idle processes': 1,
#  u'listen queue': 0,
#  u'listen queue len': 32768,
#  u'max active processes': 1,
#  u'max children reached': 0,
#  u'max listen queue': 0,
#  u'pool': u'www.starbucks.com.cn',
#  u'process manager': u'dynamic',
#  u'processes': [{u'content length': 0,
#                  u'last request cpu': 0.0,
#                  u'last request memory': 0,
#                  u'pid': 22288,
#                  u'request duration': 128,
#                  u'request method': u'GET',
#                  u'request uri': u'/status?full&json',
#                  u'requests': 58,
#                  u'script': u'-',
#                  u'start since': 62958,
#                  u'start time': 1450082840,
#                  u'state': u'Running',
#                  u'user': u'-'},
#                 {u'content length': 0,
#                  u'last request cpu': 0.0,
#                  u'last request memory': 262144,
#                  u'pid': 22289,
#                  u'request duration': 131,
#                  u'request method': u'GET',
#                  u'request uri': u'/status?full&json',
#                  u'requests': 57,
#                  u'script': u'-',
#                  u'start since': 62958,
#                  u'start time': 1450082840,
#                  u'state': u'Idle',
#                  u'user': u'-'}],
#  u'slow requests': 0,
#  u'start since': 62958,
#  u'start time': 1450082840,
#  u'total processes': 2}


def read_php_fpm_status(address):

    if not find_executable("cgi-fcgi"):
        raise Exception("cgi-fcgi can not be found.")

    child = subprocess.Popen(
        ['cgi-fcgi', '-bind', '-connect', address],
        env=env,
        stdout=subprocess.PIPE
    )

    out, err = child.communicate()

    if err:
        raise Exception(err)

    return_code = child.returncode
    if return_code != 0:
        raise Exception("cgi-fcgi return code is not 0: %s" % return_code)

    # "out" is the response from php-fpm server, it consists of two parts:
    # HTTP header and content, result[0] is HTTP header, result[1] is the content
    # which can be decoded as json object. They can be split by \r\n\r\n.

    result = out.split("\r\n\r\n")

    if len(result) == 2:
        try:
            return json.loads(result[1])
        except (ValueError, TypeError):
            return

    return


if __name__ == '__main__':

    if len(sys.argv) != 2:
        print "Argument not provided."
    else:
        arg = sys.argv[1]
        try:
            if SOCKET:
                result = read_php_fpm_status(SOCKET)
            elif HOST and PORT:
                host_port_string = "{host}:{port}".format(
                    host=HOST,
                    port=PORT,
                )
                result = read_php_fpm_status(host_port_string)
            else:
                print "Check SOCKET, HOST and PORT."
                exit(1)
        except Exception as e:
            print "Unexpected Error: %s" % e
            exit(1)

        if result and arg in result.keys():
            print(json.dumps(result[arg]))
        else:
            print("The key %s cannot be found" % arg)
            exit(1)
