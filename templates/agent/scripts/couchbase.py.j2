import json
import urlparse
import requests
import sys


# Usage examples:
# Cluster:

# python couchbase.py cluster maxBucketCount int
# python couchbase.py cluster name string
# python couchbase.py cluster buckets.uri string
# python couchbase.py cluster storageTotals.hdd.free int
# python couchbase.py cluster nodes string_list

# Bucket

# python couchbase.py bucket names string_list
# python couchbase.py bucket <name>  stats.op.samples.ops avg

# Node
# python couchbase.py node <hostname> interestingStats.couch_views_data_size int


couchbase_api_endpoint = "{{ zabbix_couchbase.api_endpoint }}"
cluster_url = urlparse.urljoin(couchbase_api_endpoint, "/pools/default/")
buckets_url = urlparse.urljoin(couchbase_api_endpoint, "/pools/default/buckets/")


def get_from_url(url, params={}):
    return json.loads(requests.get(url, params=params).content)

def handle_data_by_type(value, data_type, macro=None):
    if data_type == "int":
        return int(value)

    if data_type == "string":
        return str(value)

    if data_type == "float":
        return float(value)

    # if data_type is avg, then value should be a list,
    # and the each element in this list is numeric.
    # then take average of values in this list.
    if data_type == "avg":
        assert type(value) == list
        return sum(value) / float(len(value))

    # value should be a list of string
    if data_type == "string_list":
        assert type(value) == list
        return json.dumps({
            "data": [{"{#%s}" % macro : str(item)} for item in value]
        })

def get_data_from_keys(data, keys_string):
    """
    Get wanted data through layers.
    """
    keys = keys_string.split(".")
    for key in keys:
        data = data[key]
    return data


def handle_cluster(args):
    # couchbase['cluster', key, type]
    data = get_from_url(cluster_url)
    data_type = args[1]
    keys_string = args[0]

    result = get_data_from_keys(data, keys_string)

    if keys_string == "nodes":
        result = [item['hostname'].split(":")[0] for item in result]
        print handle_data_by_type(result, data_type, "NODEHOST")
        exit(0)

    print handle_data_by_type(result, data_type)


def handle_bucket(args):
    # warning: you can not call your bucket name to "names",
    # it will conflict with the following condition.
    # couchbase['bucket', 'names', type]
    # type here is `string_list`
    if len(args) == 2 and args[0] == 'names':
        data = get_from_url(buckets_url)
        bucket_names = [bucket['name'] for bucket in data]
        print handle_data_by_type(bucket_names, args[1], "BUCKETNAME")
        exit(0)

    # couchbase['bucket', name, key, type]
    name = args[0]
    data_type = args[2]

    bucket_url = urlparse.urljoin(buckets_url, "%s/" % name)

    # couchbase['bucket', name, 'stats.*', type]
    keys_string = args[1]
    if keys_string.startswith("stats"):
        bucket_stats_url = urlparse.urljoin(bucket_url, "stats?zoom=minute")
        data = get_from_url(bucket_stats_url)
        result = get_data_from_keys(data, keys_string.split(".", 1)[1])
    else:
        data = get_from_url(bucket_url)
        # couchbase['bucket', name, "nodes.hostnames", "string"]
        if keys_string == "nodes.hostnames":
            result = [node['hostname'] for node in get_data_from_keys(data, "nodes")]
            result = ", ".join(result)
        # couchbase['bucket', name, "*", type]
        else:
            result = get_data_from_keys(data, keys_string)

    print handle_data_by_type(result, data_type)


def handle_node(args):
    # couchbase['node', hostname, key, type]
    hostname = args[0]
    nodes = get_from_url(cluster_url).get("nodes")
    data_type = args[2]
    for node in nodes:
        if node.get("hostname").split(":")[0] == hostname:
            data = node
            break
    result = get_data_from_keys(data, args[1])

    print handle_data_by_type(result, data_type)


def main():
    args = sys.argv[1:]

    if len(args) < 1:
        print "argument not provided."
        exit(1)

    # The object_type (first agrument) is either cluster, bucket, or node.
    object_type = args[0]
    extra_args = args[1:]

    if object_type == "cluster":
        handle_cluster(extra_args)

    elif object_type == "bucket":
        handle_bucket(extra_args)

    elif object_type == "node":
        handle_node(extra_args)
    else:
        print "Argument is not either cluster, bucket, node"
        exit(1)


if __name__ == "__main__":
    main()
