#
# {{ ansible_managed }}
#
# This script get redis status by querying with INFO command
# through socket
#
# author: Song



import socket
import sys


BUFFER_SIZE = 512
REDIS_HOST = "{{ zabbix_redis.host }}"
REDIS_PORT = "{{ zabbix_redis.port }}"
REDIS_PASSWORD = "{{ zabbix_redis.password }}"


# Sample redis info formatted as dictionary
# Pass one of the keys below as argument when
# running this script

# Example: python redis.py tcp_port


class RedisError(Exception):
    pass

# The response of INFO command is formatted as "RESP Bulk Strings"

# Read redis protocol specification about "RESP Bulk Strings"
# http://redis.io/topics/protocol

# For example, the returned string from redis "foobar" is encoded as like this:
# "$6\r\nfoobar\r\n", 6 is the length of the content.
# This function first tries to find the length, then read the content.

def read_redis_info(host, port):
    """ Get redis status info by sending 'INFO ALL' to socket. """
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((host, port))

    # Validate redis password
    # First, sending AUTH password
    # then, tries to get first three characters responeded from redis
    # if it is "+OK", then read the trailing \r\n
    # if not, read the rest of the message, and raise that message as error.

    if REDIS_PASSWORD:
        s.sendall("AUTH %s\r\n" % REDIS_PASSWORD)
        msg = s.recv(3)
        if msg == "+OK":
            s.recv(2)  # Read \r\n
        else:
            error_msg = msg
            while True:
                character = s.recv(1)
                if character == "\r" and s.recv(1) == "\n":
                    break
                else:
                    error_msg += character
            s.close()
            raise RedisError(error_msg)

    s.sendall("INFO ALL\r\n" )
    content = ""
    msg = ""
    while True:
        data = s.recv(1)
        msg += data
        if data == "\r" and s.recv(1) == "\n":
            if msg[0] == "-":  # if "-" is the first char we receive, then the msg is error
                s.close()
                raise RedisError(msg)
            length = int(msg[1:-1]) + 2  # including /r/n
            break

    while True:
        data = s.recv(BUFFER_SIZE)
        length -= len(data)
        content += data
        if length <= 0:
            break

    s.close()
    return content


def parse_redis_info(content):
    """ Parse the redis info we get. """
    parsed_content = dict()
    lines = content.split("\r\n")
    for line in lines:
        if line == "" or line.startswith("#"):
            continue

        key, value = line.split(":", 1)
        parsed_content[key] = value

    return parsed_content


if __name__ == '__main__':

    if len(sys.argv) != 2:
        print "argument not provided."
        exit(1)
    else:
        arg = sys.argv[1]

        try:
            content = read_redis_info(REDIS_HOST, int(REDIS_PORT))
        except socket.error as e:
            print "Socket Error: %s" % e
            exit(1)
        except RedisError as e:
            print "Redis Error: %s" % e
            exit(1)
        except Exception as e:
            print "Unexpected Error: %s" % e
            exit(1)

        result = parse_redis_info(content)

        if not result:
            print "Cannot find any key / value pair from redis INFO command."
            exit(1)

        if arg in result.keys():
            print(result[arg])
        else:
            print("Key (%s) cannot be found." % arg)
            exit(1)
